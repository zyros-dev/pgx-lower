LOAD 'pgx_lower.so';
NOTICE:  Installing custom executor hook...
NOTICE:  Registering custom sigsegv handler!
DROP TABLE IF EXISTS test;
CREATE TABLE test (
    id SERIAL PRIMARY KEY,
    col2 BOOLEAN
);
INSERT INTO test(col2)
SELECT CASE WHEN gs % 2 = 0 THEN TRUE ELSE FALSE END
FROM generate_series(1, 100) AS gs;
NOTICE:  Custom executor is being executed in C!
NOTICE:  Calling C++ executor from C...
NOTICE:  Not a SELECT statement, skipping
NOTICE:  MLIR couldn't handle query, falling back to standard executor
SELECT SUM(id) FROM test;
NOTICE:  Custom executor is being executed in C!
NOTICE:  Calling C++ executor from C...
NOTICE:  MLIR couldn't handle query, falling back to standard executor
 sum  
------
 5050
(1 row)

SELECT * FROM test;
NOTICE:  Custom executor is being executed in C!
NOTICE:  Calling C++ executor from C...
NOTICE:  Generated MLIR with PostgreSQL typed field access:
NOTICE:  MLIR with field access: module {
  func.func private @open_postgres_table(i64) -> i64
  func.func private @read_next_tuple_from_table(i64) -> i64
  func.func private @close_postgres_table(i64)
  func.func private @get_int_field(i64, i32, !llvm.ptr) -> i32
  func.func private @get_text_field(i64, i32, !llvm.ptr) -> i64
  func.func private @add_tuple_to_result(i64) -> i1
  func.func @main() -> i64 {
    %0 = pg.scan_table "current_table" : !pg.table_handle
    %c0_i64 = arith.constant 0 : i64
    %c-2_i64 = arith.constant -2 : i64
    %true = arith.constant true
    %1:2 = scf.while (%arg0 = %true, %arg1 = %c0_i64) : (i1, i64) -> (i1, i64) {
      scf.condition(%arg0) %arg0, %arg1 : i1, i64
    } do {
    ^bb0(%arg0: i1, %arg1: i64):
      %2 = pg.read_tuple %0 : !pg.table_handle -> !pg.tuple_handle
      %3 = builtin.unrealized_conversion_cast %2 : !pg.tuple_handle to i64
      %4 = arith.cmpi eq, %3, %c-2_i64 : i64
      %5:2 = scf.if %4 -> (i1, i64) {
        %false = arith.constant false
        scf.yield %false, %arg1 : i1, i64
      } else {
        %true_1 = arith.constant true
        %6 = func.call @add_tuple_to_result(%3) : (i64) -> i1
        %c1_i64 = arith.constant 1 : i64
        %7 = arith.addi %arg1, %c1_i64 : i64
        scf.yield %true_1, %7 : i1, i64
      }
      scf.yield %5#0, %5#1 : i1, i64
    }
    %c0_i64_0 = arith.constant 0 : i64
    call @close_postgres_table(%c0_i64_0) : (i64) -> ()
    return %1#1 : i64
  }
}

NOTICE:  Applied pg-to-scf lowering pass!
NOTICE:  Lowered MLIR: module {
  func.func private @open_postgres_table(i64) -> i64
  func.func private @read_next_tuple_from_table(i64) -> i64
  func.func private @close_postgres_table(i64)
  func.func private @get_int_field(i64, i32, !llvm.ptr) -> i32
  func.func private @get_text_field(i64, i32, !llvm.ptr) -> i64
  func.func private @add_tuple_to_result(i64) -> i1
  func.func @main() -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %false = arith.constant false
    %true = arith.constant true
    %c-2_i64 = arith.constant -2 : i64
    %c0_i64 = arith.constant 0 : i64
    %c-5956942909115520617_i64 = arith.constant -5956942909115520617 : i64
    %0 = call @open_postgres_table(%c-5956942909115520617_i64) : (i64) -> i64
    %1:2 = scf.while (%arg0 = %true, %arg1 = %c0_i64) : (i1, i64) -> (i1, i64) {
      scf.condition(%arg0) %arg0, %arg1 : i1, i64
    } do {
    ^bb0(%arg0: i1, %arg1: i64):
      %2 = func.call @read_next_tuple_from_table(%0) : (i64) -> i64
      %3 = arith.cmpi eq, %2, %c-2_i64 : i64
      %4:2 = scf.if %3 -> (i1, i64) {
        scf.yield %false, %arg1 : i1, i64
      } else {
        %5 = func.call @add_tuple_to_result(%2) : (i64) -> i1
        %6 = arith.addi %arg1, %c1_i64 : i64
        scf.yield %true, %6 : i1, i64
      }
      scf.yield %4#0, %4#1 : i1, i64
    }
    call @close_postgres_table(%c0_i64) : (i64) -> ()
    return %1#1 : i64
  }
}

NOTICE:  Lowered PostgreSQL typed field access MLIR to LLVM dialect!
NOTICE:  Created MLIR ExecutionEngine for PostgreSQL typed field access!
NOTICE:  Invoked MLIR JIT PostgreSQL typed field access!
NOTICE:  PostgreSQL typed field access completed with result: 100
NOTICE:  MLIR successfully handled the query
NOTICE:  MLIR successfully handled the query
 id  | col2 
-----+------
   1 | f
   2 | t
   3 | f
   4 | t
   5 | f
   6 | t
   7 | f
   8 | t
   9 | f
  10 | t
  11 | f
  12 | t
  13 | f
  14 | t
  15 | f
  16 | t
  17 | f
  18 | t
  19 | f
  20 | t
  21 | f
  22 | t
  23 | f
  24 | t
  25 | f
  26 | t
  27 | f
  28 | t
  29 | f
  30 | t
  31 | f
  32 | t
  33 | f
  34 | t
  35 | f
  36 | t
  37 | f
  38 | t
  39 | f
  40 | t
  41 | f
  42 | t
  43 | f
  44 | t
  45 | f
  46 | t
  47 | f
  48 | t
  49 | f
  50 | t
  51 | f
  52 | t
  53 | f
  54 | t
  55 | f
  56 | t
  57 | f
  58 | t
  59 | f
  60 | t
  61 | f
  62 | t
  63 | f
  64 | t
  65 | f
  66 | t
  67 | f
  68 | t
  69 | f
  70 | t
  71 | f
  72 | t
  73 | f
  74 | t
  75 | f
  76 | t
  77 | f
  78 | t
  79 | f
  80 | t
  81 | f
  82 | t
  83 | f
  84 | t
  85 | f
  86 | t
  87 | f
  88 | t
  89 | f
  90 | t
  91 | f
  92 | t
  93 | f
  94 | t
  95 | f
  96 | t
  97 | f
  98 | t
  99 | f
 100 | t
(100 rows)

