#include "mlir/Dialect/DB/IR/DBTypes.h"
#include "mlir/Dialect/DB/IR/DBDialect.h"
#include "mlir/Dialect/DB/IR/DBOpsEnums.h"

#include "mlir/IR/Builders.h"
#include "mlir/IR/DialectImplementation.h"
#include "mlir/IR/Types.h"

#include <llvm/ADT/TypeSwitch.h>

using namespace mlir;

// FieldParser templates are now auto-generated by TableGen

namespace pgx::pgx::mlir::db {
llvm::raw_ostream& operator<<(llvm::raw_ostream& os, const pgx::pgx::mlir::db::DateUnitAttr& dt) {
   os << pgx::pgx::mlir::db::stringifyDateUnitAttr(dt);
   return os;
}
llvm::raw_ostream& operator<<(llvm::raw_ostream& os, const pgx::pgx::mlir::db::IntervalUnitAttr& dt) {
   os << pgx::pgx::mlir::db::stringifyIntervalUnitAttr(dt);
   return os;
}
llvm::raw_ostream& operator<<(llvm::raw_ostream& os, const pgx::pgx::mlir::db::TimeUnitAttr& dt) {
   os << pgx::pgx::mlir::db::stringifyTimeUnitAttr(dt);
   return os;
}

#define GET_TYPEDEF_CLASSES
#include "mlir/Dialect/DB/IR/DBOpsTypes.cpp.inc"

void DBDialect::registerTypes() {
   addTypes<
#define GET_TYPEDEF_LIST
#include "mlir/Dialect/DB/IR/DBOpsTypes.cpp.inc"
      >();
}

} // namespace pgx::pgx::mlir::db