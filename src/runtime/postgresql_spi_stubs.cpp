#include "execution/logging.h"
#include <cstdint>

// PostgreSQL SPI Function Stubs
// These are stub implementations for the PostgreSQL SPI functions
// that are referenced in the DB->Std lowering pass but not yet implemented.
// The actual implementations would integrate with PostgreSQL's SPI interface.

extern "C" {

// Open a PostgreSQL table for scanning
// In a real implementation, this would use SPI_connect and SPI_execute
void* pg_table_open(const char* table_name) {
    PGX_DEBUG("pg_table_open stub called for table: " + std::string(table_name ? table_name : "NULL"));
    // For now, return a dummy handle
    // Real implementation would open a table scan using SPI
    return reinterpret_cast<void*>(0x1234);
}

// Get the next tuple from an open table scan
// Returns 1 if a tuple is available, 0 if end of scan
int64_t pg_get_next_tuple(void* table_handle) {
    PGX_DEBUG("pg_get_next_tuple stub called with handle: " + std::to_string(reinterpret_cast<uintptr_t>(table_handle)));
    // For now, always return 0 (no tuples)
    // Real implementation would fetch next tuple via SPI
    return 0;
}

// Extract a field from the current tuple
// field_index is 0-based
int32_t pg_extract_field(void* tuple, int32_t field_index) {
    PGX_DEBUG("pg_extract_field stub called for field index: " + std::to_string(field_index));
    // For now, return a dummy value
    // Real implementation would extract field from SPI tuple
    return 42;
}

// Store a result value for return to PostgreSQL
void pg_store_result(void* result) {
    PGX_DEBUG("pg_store_result stub called with result: " + std::to_string(reinterpret_cast<uintptr_t>(result)));
    // Real implementation would store result in SPI destination
}

// Type-specific store result functions (generated by DBToStd)
void pg_store_result_i32(int32_t value) {
    PGX_DEBUG("pg_store_result_i32 stub called with value: " + std::to_string(value));
    // Real implementation would store int32 result
}

void pg_store_result_i64(int64_t value) {
    PGX_DEBUG("pg_store_result_i64 stub called with value: " + std::to_string(value));
    // Real implementation would store int64 result
}

void pg_store_result_f64(double value) {
    PGX_DEBUG("pg_store_result_f64 stub called with value: " + std::to_string(value));
    // Real implementation would store float64 result
}

void pg_store_result_text(const char* value) {
    PGX_DEBUG("pg_store_result_text stub called with value: " + std::string(value ? value : "NULL"));
    // Real implementation would store text result
}

} // extern "C"